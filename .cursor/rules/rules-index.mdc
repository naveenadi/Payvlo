---
description: 
globs: 
alwaysApply: true
---
# üìã Cursor Rules Master Index

This is the central navigation hub for all Cursor rules in the project. Use this index to understand available rules, their purposes, and when to apply them.

## üóÇÔ∏è Available Rules

### Core System Rules

#### [cursor-rules.mdc](mdc:.cursor/rules/cursor-rules.mdc)
**Purpose**: Guidelines for creating and managing Cursor rules  
**When to Use**: When adding new rules or modifying existing ones  
**Key Features**:
- File location and naming conventions
- Rule structure and formatting
- Markdown syntax and Cursor-specific extensions
- File referencing patterns

#### [rules-index.mdc](mdc:.cursor/rules/rules-index.mdc)
**Purpose**: This master index file  
**When to Use**: For navigation and rule discovery  
**Key Features**:
- Complete rule inventory
- Usage guidelines and best practices
- Quick reference for rule purposes

### Development Workflow Rules

#### [aura-development-assistant.mdc](mdc:.cursor/rules/aura-development-assistant.mdc)
**Purpose**: AURA (Architectural Unit for Reasoning & Action) - Agentic AI partner for software development  
**When to Use**: For architectural decisions, project planning, and systematic development approaches  
**Key Features**:
- Living project blueprint management
- Structured development workflows
- Architectural reasoning patterns

#### [mcp-tools.mdc](mdc:.cursor/rules/mcp-tools.mdc)
**Purpose**: Comprehensive guide to MCP (Model Context Protocol) tools  
**When to Use**: When working with external APIs, data processing, or need dynamic tool discovery  
**Key Features**:
- Memory and knowledge management tools
- Web search and information retrieval
- Library documentation access
- Dynamic tool discovery with MCP proxy
- Advanced workflow integration patterns

### Documentation & Generation Rules

#### [development-guide-generator.mdc](mdc:.cursor/rules/development-guide-generator.mdc)
**Purpose**: Systematic documentation generation for comprehensive development guides  
**When to Use**: For creating standardized project documentation, technical guides, and reference materials  
**Key Features**:
- Automated documentation generation templates
- AURA protocol integration for plan.md synchronization
- Quality standards and file size guidelines
- Domain-specific guide generation (compliance, business, technical, research)
- Consistent documentation structure across projects

### Framework-Specific Rules

#### [sveltekit.mdc](mdc:.cursor/rules/sveltekit.mdc)
**Purpose**: SvelteKit conventions and best practices for fullstack development  
**When to Use**: When developing SvelteKit applications, setting up routing, or implementing SSR patterns  
**Key Features**:
- File-based routing structure and conventions
- Component patterns and TypeScript integration
- Data fetching with load functions
- Form handling and progressive enhancement
- Authentication, error handling, and performance optimization

### Input & Interaction Systems

#### [simple-input-system.mdc](mdc:.cursor/rules/input-systems/simple-input-system.mdc)
**Purpose**: Interactive task loop system with simple terminal-based user feedback  
**When to Use**: For iterative development with quick user input and course corrections  
**Key Features**:
- Simple terminal prompt interface
- Interactive feedback loop for task execution
- Integration with AURA development workflow
- Exit conditions and workflow control

#### [rich-input-system.mdc](mdc:.cursor/rules/input-systems/rich-input-system.mdc)
**Purpose**: Enhanced markdown-based input system with image support and complex formatting  
**When to Use**: For complex requests requiring visual mockups, detailed specifications, or rich content  
**Key Features**:
- Markdown-based input files (prompt.md)
- Base64 image support for mockups and diagrams
- Code block parsing and syntax highlighting
- Priority-based task classification
- Enhanced AURA protocol integration

### Continuous Improvement Rules

#### [self-improvement.mdc](mdc:.cursor/rules/self-improvement.mdc)
**Purpose**: Guidelines for continuously improving Cursor rules based on emerging patterns  
**When to Use**: During code reviews, refactoring, or when identifying new patterns  
**Key Features**:
- Rule improvement triggers
- Pattern recognition guidelines
- Rule quality assessment
- Deprecation and update processes

## üéØ Rule Selection Guide

### For New Projects
1. Start with [aura-development-assistant.mdc](mdc:.cursor/rules/aura-development-assistant.mdc) for architectural planning
2. Set up [simple-input-system.mdc](mdc:.cursor/rules/input-systems/simple-input-system.mdc) for interactive development
3. Use [mcp-tools.mdc](mdc:.cursor/rules/mcp-tools.mdc) for external integrations and research
4. Apply [sveltekit.mdc](mdc:.cursor/rules/sveltekit.mdc) for SvelteKit-specific development
5. Reference [cursor-rules.mdc](mdc:.cursor/rules/cursor-rules.mdc) when creating project-specific rules

### For Existing Projects
1. Check [self-improvement.mdc](mdc:.cursor/rules/self-improvement.mdc) for optimization opportunities
2. Use [mcp-tools.mdc](mdc:.cursor/rules/mcp-tools.mdc) for enhanced development capabilities
3. Apply [aura-development-assistant.mdc](mdc:.cursor/rules/aura-development-assistant.mdc) for systematic improvements
4. Consider [rich-input-system.mdc](mdc:.cursor/rules/input-systems/rich-input-system.mdc) for complex requirements
5. Leverage [development-guide-generator.mdc](mdc:.cursor/rules/development-guide-generator.mdc) for documentation needs

### For SvelteKit Development
1. **Framework Setup**: Use [sveltekit.mdc](mdc:.cursor/rules/sveltekit.mdc) for proper project structure
2. **Component Development**: Follow SvelteKit component patterns and TypeScript integration
3. **Routing & Navigation**: Implement file-based routing with proper load functions
4. **Form Handling**: Use progressive enhancement and validation patterns
5. **Performance**: Apply SSR optimization and caching strategies

### For Interactive Development
1. **Quick Iterations**: Use [simple-input-system.mdc](mdc:.cursor/rules/input-systems/simple-input-system.mdc) for rapid feedback
2. **Complex Requests**: Use [rich-input-system.mdc](mdc:.cursor/rules/input-systems/rich-input-system.mdc) for detailed specs
3. **Visual Requirements**: [rich-input-system.mdc](mdc:.cursor/rules/input-systems/rich-input-system.mdc) for mockups and diagrams
4. **Continuous Workflow**: Combine input systems with [aura-development-assistant.mdc](mdc:.cursor/rules/aura-development-assistant.mdc)

### For Documentation & Quality
1. **Generate Guides**: Use [development-guide-generator.mdc](mdc:.cursor/rules/development-guide-generator.mdc) for comprehensive documentation
2. **Maintain Standards**: Apply [self-improvement.mdc](mdc:.cursor/rules/self-improvement.mdc) for continuous improvement
3. **Rule Management**: Reference [cursor-rules.mdc](mdc:.cursor/rules/cursor-rules.mdc) for proper formatting
4. **Update Index**: Keep this [rules-index.mdc](mdc:.cursor/rules/rules-index.mdc) current with new rules

## üîÑ Workflow Integration

### Development Phase Integration
```markdown
**Planning Phase**:
- [aura-development-assistant.mdc](mdc:.cursor/rules/aura-development-assistant.mdc) ‚Üí Project blueprint and architecture
- [mcp-tools.mdc](mdc:.cursor/rules/mcp-tools.mdc) ‚Üí Research and context gathering
- [rich-input-system.mdc](mdc:.cursor/rules/input-systems/rich-input-system.mdc) ‚Üí Complex requirement gathering
- [development-guide-generator.mdc](mdc:.cursor/rules/development-guide-generator.mdc) ‚Üí Documentation framework setup

**Implementation Phase**:
- [simple-input-system.mdc](mdc:.cursor/rules/input-systems/simple-input-system.mdc) ‚Üí Interactive feedback loop
- [sveltekit.mdc](mdc:.cursor/rules/sveltekit.mdc) ‚Üí Framework-specific development patterns
- [mcp-tools.mdc](mdc:.cursor/rules/mcp-tools.mdc) ‚Üí Tool discovery and integration
- [aura-development-assistant.mdc](mdc:.cursor/rules/aura-development-assistant.mdc) ‚Üí Systematic development approach

**Documentation Phase**:
- [development-guide-generator.mdc](mdc:.cursor/rules/development-guide-generator.mdc) ‚Üí Generate comprehensive guides
- [self-improvement.mdc](mdc:.cursor/rules/self-improvement.mdc) ‚Üí Documentation quality assessment

**Review Phase**:
- [self-improvement.mdc](mdc:.cursor/rules/self-improvement.mdc) ‚Üí Pattern identification and rule updates
- [cursor-rules.mdc](mdc:.cursor/rules/cursor-rules.mdc) ‚Üí Rule creation for new patterns

**Continuous Iteration**:
- [simple-input-system.mdc](mdc:.cursor/rules/input-systems/simple-input-system.mdc) ‚Üí Quick course corrections
- [rich-input-system.mdc](mdc:.cursor/rules/input-systems/rich-input-system.mdc) ‚Üí Detailed feedback with visuals
```

### Rule Maintenance Workflow
```markdown
1. **Monitor**: Use patterns from [self-improvement.mdc](mdc:.cursor/rules/self-improvement.mdc)
2. **Analyze**: Apply guidelines from [cursor-rules.mdc](mdc:.cursor/rules/cursor-rules.mdc)
3. **Update**: Modify existing rules or create new ones
4. **Document**: Use [development-guide-generator.mdc](mdc:.cursor/rules/development-guide-generator.mdc) for new guides
5. **Index**: Update this master index with new rules
6. **Integrate**: Ensure new rules work with [aura-development-assistant.mdc](mdc:.cursor/rules/aura-development-assistant.mdc) and [mcp-tools.mdc](mdc:.cursor/rules/mcp-tools.mdc)
```

## üìÅ Rule Organization

### Directory Structure
```
.cursor/rules/
‚îú‚îÄ‚îÄ rules-index.mdc           # This master index
‚îú‚îÄ‚îÄ cursor-rules.mdc          # Rule creation guidelines
‚îú‚îÄ‚îÄ aura-development-assistant.mdc  # Development workflow system
‚îú‚îÄ‚îÄ mcp-tools.mdc            # MCP tool integration guide
‚îú‚îÄ‚îÄ development-guide-generator.mdc # Documentation generation system
‚îú‚îÄ‚îÄ sveltekit.mdc            # SvelteKit framework conventions
‚îú‚îÄ‚îÄ self-improvement.mdc     # Rule evolution guidelines
‚îú‚îÄ‚îÄ input-systems/           # Interactive input and feedback systems
‚îÇ   ‚îú‚îÄ‚îÄ simple-input-system.mdc    # Terminal-based interactive loop
‚îÇ   ‚îî‚îÄ‚îÄ rich-input-system.mdc      # Markdown-based rich input
‚îî‚îÄ‚îÄ [future-rules.mdc]       # Additional domain-specific rules
```

### Rule Categories
- **üèóÔ∏è Architecture**: [aura-development-assistant.mdc](mdc:.cursor/rules/aura-development-assistant.mdc)
- **üîß Tools**: [mcp-tools.mdc](mdc:.cursor/rules/mcp-tools.mdc)
- **üìñ Documentation**: [development-guide-generator.mdc](mdc:.cursor/rules/development-guide-generator.mdc)
- **üéÆ Interaction**: [simple-input-system.mdc](mdc:.cursor/rules/input-systems/simple-input-system.mdc), [rich-input-system.mdc](mdc:.cursor/rules/input-systems/rich-input-system.mdc)
- **üöÄ Framework**: [sveltekit.mdc](mdc:.cursor/rules/sveltekit.mdc)
- **üìã Meta**: [cursor-rules.mdc](mdc:.cursor/rules/cursor-rules.mdc), [rules-index.mdc](mdc:.cursor/rules/rules-index.mdc)
- **üîÑ Process**: [self-improvement.mdc](mdc:.cursor/rules/self-improvement.mdc)

## üöÄ Quick Start Guide

### For First-Time Users
1. **Read**: [cursor-rules.mdc](mdc:.cursor/rules/cursor-rules.mdc) to understand rule basics
2. **Setup**: Configure [simple-input-system.mdc](mdc:.cursor/rules/input-systems/simple-input-system.mdc) for interactive development
3. **Plan**: Use [aura-development-assistant.mdc](mdc:.cursor/rules/aura-development-assistant.mdc) for project structure
4. **Framework**: Apply [sveltekit.mdc](mdc:.cursor/rules/sveltekit.mdc) for SvelteKit projects
5. **Enhance**: Leverage [mcp-tools.mdc](mdc:.cursor/rules/mcp-tools.mdc) for advanced capabilities
6. **Document**: Use [development-guide-generator.mdc](mdc:.cursor/rules/development-guide-generator.mdc) for comprehensive guides
7. **Improve**: Apply [self-improvement.mdc](mdc:.cursor/rules/self-improvement.mdc) continuously

### For Adding New Rules
1. **Check**: This index to avoid duplication
2. **Follow**: [cursor-rules.mdc](mdc:.cursor/rules/cursor-rules.mdc) formatting guidelines
3. **Integrate**: Ensure compatibility with existing rules
4. **Document**: Consider [development-guide-generator.mdc](mdc:.cursor/rules/development-guide-generator.mdc) for comprehensive rules
5. **Update**: This master index with the new rule
6. **Apply**: [self-improvement.mdc](mdc:.cursor/rules/self-improvement.mdc) quality checks

## ‚ö†Ô∏è Best Practices

- **Always check this index first** before creating new rules
- **Reference specific rules** using the [filename.mdc](mdc:filename.mdc) format
- **Keep rules focused** on specific domains or purposes
- **Update the index** whenever you add, modify, or remove rules
- **Follow naming conventions** from [cursor-rules.mdc](mdc:.cursor/rules/cursor-rules.mdc)
- **Apply continuous improvement** using [self-improvement.mdc](mdc:.cursor/rules/self-improvement.mdc)
- **Use framework-specific rules** like [sveltekit.mdc](mdc:.cursor/rules/sveltekit.mdc) for targeted development
- **Generate comprehensive documentation** with [development-guide-generator.mdc](mdc:.cursor/rules/development-guide-generator.mdc)

## üìä Rule Statistics

**Total Rules**: 9 active rules  
**Categories**: 7 (Architecture, Tools, Documentation, Interaction, Framework, Meta, Process)  
**Always Applied**: 7 rules ([aura-development-assistant.mdc](mdc:.cursor/rules/aura-development-assistant.mdc), [mcp-tools.mdc](mdc:.cursor/rules/mcp-tools.mdc), [development-guide-generator.mdc](mdc:.cursor/rules/development-guide-generator.mdc), [sveltekit.mdc](mdc:.cursor/rules/sveltekit.mdc), [simple-input-system.mdc](mdc:.cursor/rules/input-systems/simple-input-system.mdc), [rich-input-system.mdc](mdc:.cursor/rules/input-systems/rich-input-system.mdc), [self-improvement.mdc](mdc:.cursor/rules/self-improvement.mdc))  
**Conditional**: 2 rules ([cursor-rules.mdc](mdc:.cursor/rules/cursor-rules.mdc), [rules-index.mdc](mdc:.cursor/rules/rules-index.mdc))  
**Nested Structure**: 1 subdirectory (`input-systems/` with 2 rules)  
**Framework-Specific**: 1 rule ([sveltekit.mdc](mdc:.cursor/rules/sveltekit.mdc))  
**Documentation Tools**: 1 rule ([development-guide-generator.mdc](mdc:.cursor/rules/development-guide-generator.mdc))

---

üí° **Remember**: This index is your starting point for all rule-related activities. Keep it updated and use it as your navigation hub for the Cursor rules ecosystem.
